#!/bin/bash
##
## generates k-points by inverting any coordinate in Cartesian Space
## takes the Cartesian k-points generated by running rklist.sh
## and gives the new points in the Direct Lattice
##
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
GREEN='\e[0;32m'
GRE='\e[1;32m'
YELLOW='\e[1;33m'
MAG='\e[0;35m'
NC='\e[0m' # No Color
##
##
    function Line {
	printf "${BLUE}=============================${NC}\n"
    }
##
##
clear
host=`hostname`
case=`echo $PWD | awk -F / '{print$NF}'`
dir=$PWD
#exec=/home/bms/ras/utils/3D/ibz_new/trunk/ibz
    if [ "$host" == 'medusa' ]; then
	exec=$HOME/abinit_shells/ibz/rkcart2dlatt
    fi
    if [ "$host" == 'quad01' ]; then
	exec=$HOME/abinit_shells/ibz/rkcart2dlatt_quad
    fi
if [ "$#" -eq 0 ]
    then   # Script needs at least one command-line argument.
    Line
    echo "generates a list of k-points with kx -> -kx"
    echo "usage:"
    echo -e "${CYAN}gkpoints.sh${NC} $case".klist"_${blue}k${NC}"
    echo i.e.:
    ls $case.klist*
    Line
    exit 1
fi
####
if [ $1 != '0' ] 
    then
    k=$1
    cual=$case".kcartesian_"$k
    cp $case.klist_$k $case.klist_$k.o
    original=$case.klist_$k.o
    new=$case.klist_$k.n
    awk '{print -$1,$2,$3}' symmetries/$cual > perro
    
    cat perro | while read LINE
    do 
	echo "$LINE" 1 | $exec >> perro2
	awk '{if($1 != "Cartesian") print $1,$2,$3}' perro2 > $new
    done
    rm perro*
    Line
    echo -e "output:${red}$new $original ${NC}"
    Line
fi

